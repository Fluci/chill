{% extends "base.html.twig" %}

{# expects variable `journeys` with the journeys, expects variable `timetable` with settings for page #}

{% block htmlHeader %}
<script type="text/javascript">
setTimeout(function(){ location.reload(true); }, {{ timetable.refreshInterval }});
</script>
<style>
.navbar {margin-bottom: 0;}
</style>
{% endblock %}

{% block contentEnv %}

{% if page.use_mock %}
<p style="color: white;">
	This is mocked data!
</p>
{% endif %}
<div class="journeys_title">
	Abfahrt Départ Partenza
</div>

<div class="journeys">
{% for journey in journeys %}
	{# get first station #}
	{% set start = journey.PreviousCalls[0] %}

	{# get the stop we requested to observe #}
	{% set stop = journey.ThisCall %}

	{# get last station where the train will end #}
	{% set end = journey.OnwardCalls|last %}

	{# set stopIsStart = (start.StopPointRef == stop.StopPointRef) #}
	{# set endIsStart = (end.StopPointRef == stop.StopPointRef) #}
	{% set stopIsStart = false %}
	{% set endIsStart = false %}

	{% set overdue = stop.ServiceArrival.overdue %}

	<div class="stopPoint">
		<p class="arrival">
			<span class="line">{{ journey.Service.EntireLineName }}</span>:
			<span class="stop">{{ stop.StopPointName.Text }}</span>
			<span class="time">{{ stop.ServiceArrival.TimetabledTime|date("H:i") }}</span>
			{% if overdue > 0 %}
			<span class="overdue"> +{{ overdue|date("i") }} min</span>
			{% endif %}
		</p>
		<p class="detail">
			{% if not stopIsStart %}
				<span class="stop">{{ start.StopPointName.Text }}</span> <span class="time">{{ start.ServiceDeparture.TimetabledTime|date("H:i") }}</span>
			{% endif %}
			{% if not (stopIsStart or endIsStart) %}&rarr; {% endif %}
			{% if not endIsStart %}
				<span class="stop">{{ end.StopPointName.Text }}</span> <span class="time">{{ end.ServiceArrival.TimetabledTime|date("H:i") }}</span>
			{% endif %}
		</p>
	</div>{# stopPoint #}

{% endfor %}

</div>{# journeys #}
<div class="journeys_fill_l"></div>
<div class="journeys_fill_r"></div>
{% endblock %} {# root #}
